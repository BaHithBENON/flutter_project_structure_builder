project_name: my_flutter_app

# Available options for architecture:
#   - clean_architecture (default)
#   - mvc_architecture
#   - mvvm_architecture
architecture: mvvm_architecture 

# Available options for features_strategy:
#   - inLib (default) : all features are in the same lib folder
#   - independantModules : for each feature, we will create a flutter module package for domain, data layer. Presentation layer are always in a project root lib folder
# 
# Note: "independantModules" option is only available for clean_architecture
# By default, all features are in the same lib folder (inLib)
features_strategy: inLib

# List of features:
features:
  - authentication:
      name: authentication
      description: Authentication feature
      entity_attributes:
        email: String
        otp: String
        password: String
        token: String
        id: int
      usecases:
        - getUserOtp:
            use_case_type: Future
            description: Retrieve OTP for user authentication
            params:
              email: String
        - verifyUserOtp:
            use_case_type: Future
            description: Verify OTP code
            params:
              email: String
              otp: String
        - verifyUserExistence:
            use_case_type: Future
            description: Verify user existence

  - user_profile:
      name: user_profile
      description: User profile management
      entity_attributes:
        id: int
        username: String
        profile_picture: String
        bio: String
      usecases:
        - getUserProfile:
            use_case_type: Stream
            description: Retrieve user profile
            params:
              id: int
        - updateUserProfile:
            use_case_type: Future
            description: Update user profile details
            params:
              id: int
              username: String
              profile_picture: String
              bio: String

  - settings:
      name: settings
      description: Application settings management
      entity_attributes:
        notifications_enabled: bool
        language: String
        theme: String
      usecases:
        - getSettings:
            use_case_type: Future
            description: Retrieve user settings
        - getLanguage:
            use_case_type: Stream
            description: Retrieve user language
        - updateSettings:
            use_case_type: Future
            description: Update application settings
            params:
              notifications_enabled: bool
              language: String
              theme: String

  - notifications:
      name: notifications
      description: Notification management
      usecases:
        - getNotifications:
            use_case_type: Stream
            description: Retrieve user notifications

  - analytics:
      name: analytics
      description: Analytics management
      entity_attributes:
        id: int
        event_name: String
        event_data: Map<String, String>
        timestamp: DateTime

# State management
# By default, state management is GetX
# - none, getx, bloc, cubit, provider, riverpod, mobx
# Note : Only none and getx is available for the moment.
state_management: getx

# List of environments:
envs:
  - development
  - staging
  - production

# List of environment variables
# DonÂ´t put sensitive data (Just the names of the variables)
env_variables:
  - ENV1
  - ENV2
